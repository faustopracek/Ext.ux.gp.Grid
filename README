==============
Ext.ux.gp.Grid (gpgrid)
==============

This component extends mitchellsimoens Ext.ux.touch.grid and it can display a filter toolbar with a search field for each column.

-----------------------
GENERAL CONFIG OPTIONS:
-----------------------
*** defaultFilterRowFieldType: String ***
 The default filter field value type. (Defualt value: 'string')

*** disableFilterRowActions: Boolean ***
If it is true the store filter action doesn't start after filter fields are changed. but fire 'filter' event only. (Defualt value: false)


*** filterRowDelay:Number ***
The milliseconds waiting before new value in filter field is applied. (Defualt value: 1000)


*** showFilterRow: Boolean ***
If it is true it enables filter row in grid. (Defualt value: false)

*** showFilterRowPaging: Boolean ***
If it is true in FilterRow Toolbar it is possible to have "Back" and "Forward" buttons for store paging

----------------------
COLUMN CONFIG OPTIONS:
----------------------
*** filterRowFieldHidden: Boolean ***
If it is true the filter field for this column is hidden. (Defualt value: false)

*** filterRowFieldType    : Object ***
Filter field value type for this column. For example: { type : 'date' } (Defualt value: defaultFilterRowFieldType)

--------
METHODS:
--------
*** clearAllFilterFields([Boolean disableApplyFilter]) ***
It clears all filter fields. If disableApplyFilter is true the store filter doesn't change. Default disableApplyFilter value is false.


*** getFilterFieldValue(String dataIndex) ***
It returns the filter field value by its dataIndex property.

*** setFilterFieldValue(String dataIndex,[Object fieldValue],[Boolean disableApplyFilter]) ***
It sets a specific filter field (by its dataIndex property) to a specifi value. If disableApplyFilter is true the store filter doesn't change. Default disableApplyFilter value is false.

*** storeLoad(Ext.data.Store/Object store) ***
It loads store and refresh paging. To be use with custom filtering (when disableFilterRowActions is true and the filter is created in 'filter' event).

-------
EVENTS:
-------
*** filter(Ext.Component this, Object grid, Ext.data.Store store, Object[] filtersArray) ***
It fires when the store filters property is changed.



**********************
CUSTOM FILTER EXAMPLE:
**********************

{
	xtype:'gpgrid',
	scope:this,
	showFilterRow:true,
	showFilterRowPaging:true,
	disableFilterRowActions:true,
	pagingBarDocking:'bottom',
	store      : null,
	listeners : {
               		filter: function(sender, grid, store, filtersArray){
        				var where="";
        				var c=0;
        				for (; c < filtersArray.length; c++){
              					where=where+" AND [anagra].["+filtersArray[c].property+"] LIKE '"+filtersArray[c].value+"%'";
        				}
        				grid.storeLoad(myCurrentSqlString+where);
    				}
                                    
        },
	columns   : [
			{
				header    : 'Code',
				dataIndex : 'an_code',
                                width     : '20%'
                        },
                        {
                                header    : 'Description',
                                dataIndex : 'an_descr',
                                width     : '80%'
                        }
                    ]
}